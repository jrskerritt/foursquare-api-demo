{"version":3,"sources":["utilities/getGeolocation.js","components/SearchInput/index.js","utilities/mapVenues.js","components/Venue/index.js","components/SearchResults/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["errorMessage","getGeolocation","navigator","a","geolocation","Error","Promise","resolve","getCurrentPosition","coords","lat","Math","round","latitude","long","longitude","SearchInput","onSearchComplete","useState","searchTerm","setSearchTerm","isSearching","setIsSearching","fetchSearchResults","url","term","fetch","then","res","json","rawVenues","r","response","venues","map","id","name","location","categories","primaryCategory","length","filter","c","primary","address","formattedAddress","join","category","icon","prefix","suffix","fetchByGeolocation","catch","latLong","fetchBySearchTerm","className","type","placeholder","value","onChange","target","onKeyPress","e","key","disabled","onClick","style","opacity","zIndex","data-testid","color","height","width","Venue","alt","src","SearchResults","v","defaultProps","App","lastSearchTerm","setlastSearchTerm","searchResults","setSearchResults","results","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d9ed8865.chunk.js","sourcesContent":["const errorMessage = 'Geolocation not supported or disabled';\r\n\r\nexport const getGeolocation = async navigator => {\r\n  if (!navigator.geolocation) {\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  return new Promise((resolve) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n    ({ coords }) => {\r\n      const lat = Math.round(coords.latitude * 100) / 100;\r\n      const long = Math.round(coords.longitude * 100) / 100;\r\n      resolve(`${lat},${long}`)\r\n    },\r\n    () => { throw new Error(errorMessage); }\r\n  );\r\n  });\r\n};\r\n","import React, { useState } from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport fetch from 'unfetch';\r\nimport { mapVenues } from '../../utilities/mapVenues';\r\nimport { getGeolocation } from '../../utilities/getGeolocation';\r\nimport './SearchInput.css';\r\n\r\nconst searchEndpointUrl = '/api/venues/search';\r\n\r\nexport function SearchInput({ onSearchComplete }) {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isSearching, setIsSearching] = useState(false);\r\n\r\n  const fetchSearchResults = async (url, term) => {\r\n    setIsSearching(true);\r\n    return fetch(url)\r\n      .then(res => res.json())\r\n      .then(({ response: r }) => r && r.venues ? mapVenues(r.venues) : [])\r\n      .then(venues => onSearchComplete(term, venues))\r\n      .then(() => {\r\n        setIsSearching(false);\r\n        setSearchTerm('');\r\n      });\r\n  };\r\n\r\n  const fetchByGeolocation = async () => {\r\n    const latLong = await getGeolocation(navigator).catch(() => {});\r\n    return fetchSearchResults(`${searchEndpointUrl}?ll=${latLong}`, 'your location');\r\n  };\r\n\r\n  const fetchBySearchTerm = async () => {\r\n    if (!searchTerm) {\r\n      return;\r\n    }\r\n\r\n    return fetchSearchResults(`${searchEndpointUrl}?near=${searchTerm}`, searchTerm);\r\n  }\r\n\r\n  const onKeyPress = e => {\r\n    if (e.key === 'Enter') {\r\n      fetchBySearchTerm();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-input\">\r\n      <div className=\"search-input__form pure-form\">\r\n        <div className=\"search-input__textbox\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"pure-input-1\"\r\n            placeholder=\"Enter a city, address, etc...\"\r\n            value={searchTerm}\r\n            onChange={({ target }) => setSearchTerm(target.value)}\r\n            onKeyPress={onKeyPress}\r\n          />\r\n        </div>\r\n        <div className=\"search-input__buttons\">\r\n          <button\r\n            className=\"pure-button pure-button-primary\"\r\n            type=\"button\"\r\n            disabled={isSearching}\r\n            onClick={fetchBySearchTerm}\r\n          >\r\n            Search\r\n          </button>\r\n          <button\r\n            className=\"pure-button\"\r\n            type=\"button\"\r\n            disabled={isSearching}\r\n            onClick={fetchByGeolocation}\r\n          >\r\n            Use my location\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={isSearching ?\r\n          { opacity: 1, zIndex: 10 } :\r\n          { opacity: 0, zIndex: -1 }}\r\n        className=\"search-input__loading\"\r\n        data-testid=\"loadingAnimation\"\r\n      >\r\n        <div className=\"search-input__loading-bars\">\r\n          <ReactLoading type=\"bars\" color=\"#eee\" height=\"100px\" width=\"200px\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const defaultIcon = 'https://ss3.4sqi.net/img/categories_v2/building/default_bg_32.png';\r\n\r\n// The list of venues returned by the Foursquare API has more data than\r\n// we care about. This function extracts only what our components will need.\r\nexport function mapVenues(rawVenues) {\r\n  return rawVenues && rawVenues.map(({ id, name, location, categories }) => {\r\n      const primaryCategory = categories.length && categories.filter(c => c.primary)[0];\r\n      return {\r\n        id,\r\n        name,\r\n        address: location.formattedAddress.join(', '),\r\n        category: {\r\n          name: primaryCategory ? primaryCategory.name : 'Venue',\r\n          icon: primaryCategory ?\r\n            `${primaryCategory.icon.prefix}bg_32${primaryCategory.icon.suffix}` :\r\n            defaultIcon\r\n        }\r\n      };\r\n  });\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport './Venue.css';\r\n\r\nexport function Venue({ name, address, category }) {\r\n  return (\r\n    <div className=\"venue\">\r\n      <div className=\"venue__icon\">\r\n        <LazyLoadImage\r\n          alt={category.name}\r\n          height={32}\r\n          src={category.icon}\r\n          width={32}\r\n        />\r\n      </div>\r\n      <div className=\"venue__details\">\r\n        <div className=\"venue__name\">{name}</div>\r\n        <div className=\"venue__address\">{address}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nVenue.propTypes = {\r\n  name: PropTypes.string,\r\n  address: PropTypes.string,\r\n  category: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    icon: PropTypes.string\r\n  })\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Venue } from '../Venue';\r\nimport './SearchResults.css';\r\n\r\nexport function SearchResults({ searchTerm, venues }) {\r\n  return (\r\n    <div className=\"search-results\">\r\n      {venues.length > 0 ?\r\n        <>\r\n          <h2>Venues near {searchTerm}:</h2>\r\n          <div className=\"search-results__venues\">\r\n            {venues.map(v => <Venue key={v.id} {...v} />)}\r\n          </div>\r\n        </>:\r\n        <div className=\"search-results__empty\">\r\n          Looks like we couldn't find anything for that location...\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchResults.propTypes = {\r\n  searchTerm: PropTypes.string,\r\n  venues: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    address: PropTypes.string,\r\n    category: PropTypes.shape({\r\n      name: PropTypes.string,\r\n      icon: PropTypes.string\r\n    })\r\n  }))\r\n};\r\n\r\nSearchResults.defaultProps = {\r\n  venues: []\r\n};\r\n","import React, { useState } from 'react';\nimport { SearchInput } from '../SearchInput';\nimport { SearchResults } from '../SearchResults';\nimport './App.css';\n\nexport function App() {\n  const [lastSearchTerm, setlastSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const onSearchComplete = (searchTerm, results) => {\n    setlastSearchTerm(searchTerm);\n    setSearchResults(results);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Search for Venues</h1>\n      <SearchInput onSearchComplete={onSearchComplete} />\n      {lastSearchTerm && (\n        <SearchResults\n          searchTerm={lastSearchTerm}\n          venues={searchResults}\n        />\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}